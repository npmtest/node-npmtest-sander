{"/home/travis/build/npmtest/node-npmtest-sander/test.js":"/* istanbul instrument in package npmtest_sander */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sander/lib.npmtest_sander.js":"/* istanbul instrument in package npmtest_sander */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sander = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sander = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sander/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sander && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sander */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sander\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sander.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sander.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sander.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sander.__dirname + '/lib.npmtest_sander.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sander/node_modules/sander/dist/sander.cjs.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar fs = require('graceful-fs');\nvar path = require('path');\nvar mkdirp = _interopDefault(require('mkdirp'));\nvar fs$1 = require('fs');\nvar _rimraf = _interopDefault(require('rimraf'));\n\nfunction resolvePath ( args ) {\n\treturn path.resolve.apply( null, args );\n}\n\nfunction normaliseArguments ( args ) {\n\tvar len = args.length;\n\n\tvar buildingPath = true;\n\tvar pathargs = [];\n\tvar normalised = [ null ]; // null is a placeholder for the resolved path\n\tvar i;\n\n\tfor ( i = 0; i < len; i += 1 ) {\n\t\tif ( buildingPath && typeof args[i] === 'string' ) {\n\t\t\tpathargs[i] = args[i];\n\t\t} else {\n\t\t\tbuildingPath = false;\n\t\t\tnormalised.push( args[i] );\n\t\t}\n\t}\n\n\tnormalised[0] = resolvePath( pathargs );\n\n\treturn normalised;\n}\n\nfunction asyncMethod ( methodName ) {\n\treturn function () {\n\t\tvar args = normaliseArguments( arguments );\n\n\t\treturn new Promise( function ( fulfil, reject ) {\n\t\t\targs.push( function ( err, result ) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\treject( err );\n\t\t\t\t} else {\n\t\t\t\t\tfulfil( result );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfs[ methodName ].apply( fs, args );\n\t\t});\n\t};\n}\n\nfunction syncMethod ( methodName ) {\n\treturn function () {\n\t\tvar args = normaliseArguments( arguments );\n\t\treturn fs[ methodName ].apply( fs, args );\n\t};\n}\n\nfunction asyncFileDescriptorMethod ( methodName ) {\n\treturn function () {\n\t\tvar arguments$1 = arguments;\n\n\t\tvar args = [];\n\t\tvar i = arguments.length;\n\n\t\twhile ( i-- ) {\n\t\t\targs[i] = arguments$1[i];\n\t\t}\n\n\t\treturn new Promise( function ( fulfil, reject ) {\n\t\t\targs.push( function ( err, result ) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\treject( err );\n\t\t\t\t} else {\n\t\t\t\t\tfulfil( result );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfs[ methodName ].apply( fs, args );\n\t\t});\n\t};\n}\n\nfunction resolvePathAndOptions ( args ) {\n\tvar options;\n\tvar pathargs;\n\n\tif ( typeof args[ args.length - 1 ] === 'object' ) {\n\t\toptions = args[ args.length - 1 ];\n\n\t\tvar i = args.length - 1;\n\t\tpathargs = new Array( i );\n\n\t\twhile ( i-- ) {\n\t\t\tpathargs[i] = args[i];\n\t\t}\n\t} else {\n\t\toptions = {};\n\t\tpathargs = args;\n\t}\n\n\tvar resolvedPath = path.resolve.apply( null, pathargs );\n\n\treturn { options: options, resolvedPath: resolvedPath };\n}\n\nfunction createReadStream$1 () {\n\tvar ref = resolvePathAndOptions( arguments );\n\tvar resolvedPath = ref.resolvedPath;\n\tvar options = ref.options;\n\treturn fs.createReadStream( resolvedPath, options );\n}\n\nfunction createWriteStream$1 () {\n\tvar ref = resolvePathAndOptions( arguments );\n\tvar resolvedPath = ref.resolvedPath;\n\tvar options = ref.options;\n\n\tmkdirp.sync( path.dirname( resolvedPath ) );\n\treturn fs.createWriteStream( resolvedPath, options );\n}\n\nfunction exists$1 () {\n\tvar target = resolvePath( arguments );\n\n\treturn new Promise( function (fulfil) {\n\t\tfs.exists( target, function (exists$$1) { return fulfil( exists$$1 ); } );\n\t});\n}\n\nfunction existsSync$1 () {\n\treturn fs.existsSync( resolvePath( arguments ) );\n}\n\nvar rename = asyncMethod$1( 'rename' );\nvar link = asyncMethod$1( 'link' );\n\nvar renameSync = syncMethod$1( 'renameSync' );\nvar linkSync = syncMethod$1( 'linkSync' );\n\nfunction asyncMethod$1 ( methodName ) {\n\treturn function () {\n\t\tvar src = resolvePath( arguments );\n\n\t\treturn {\n\t\t\tto: function to () {\n\t\t\t\tvar dest = resolvePath( arguments );\n\n\t\t\t\treturn new Promise( function ( fulfil, reject ) {\n\t\t\t\t\tmkdirp( path.dirname( dest ), function (err) {\n\t\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\t\treject( err );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfs[ methodName ]( src, dest, function (err) {\n\t\t\t\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\t\t\t\treject( err );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfulfil();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t};\n}\n\nfunction syncMethod$1 ( methodName ) {\n\treturn function () {\n\t\tvar src = resolvePath( arguments );\n\n\t\treturn {\n\t\t\tto: function to () {\n\t\t\t\tvar dest = resolvePath( arguments );\n\n\t\t\t\tmkdirp.sync( path.dirname( dest ) );\n\t\t\t\treturn fs[ methodName ]( src, dest );\n\t\t\t}\n\t\t};\n\t};\n}\n\nfunction mkdir () {\n\tvar dir = resolvePath( arguments );\n\n\treturn new Promise( function ( fulfil, reject ) {\n\t\tmkdirp( dir, function (err) {\n\t\t\tif ( err ) {\n\t\t\t\treject( err );\n\t\t\t} else {\n\t\t\t\tfulfil();\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction mkdirSync () {\n\tvar dir = resolvePath( arguments );\n\tmkdirp.sync( dir );\n}\n\nfunction normaliseArguments$1 ( args ) {\n\tvar options;\n\tvar flags;\n\tvar i;\n\n\tif ( typeof args[ args.length - 1 ] === 'object' ) {\n\t\toptions = args[ args.length - 1 ];\n\t\tflags = args[ args.length - 2 ];\n\t\ti = args.length - 2;\n\t} else {\n\t\toptions = {};\n\t\tflags = args[ args.length - 1 ];\n\t\ti = args.length - 1;\n\t}\n\n\tvar pathargs = new Array( i );\n\twhile ( i-- ) {\n\t\tpathargs[i] = args[i];\n\t}\n\n\tvar resolvedPath = resolvePath( pathargs );\n\n\treturn { resolvedPath: resolvedPath, options: options, flags: flags };\n}\n\nfunction bailIfExists ( src, flags, mode ) {\n\tvar alreadyExists;\n\n\ttry {\n\t\tfs.statSync( src );\n\t\talreadyExists = true;\n\t} catch ( err ) {\n\t\tif ( err.code !== 'ENOENT' ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tif ( alreadyExists ) {\n\t\t// attempt the operation = that way, we get the intended error message\n\t\t// TODO can't we just do this in the first place?\n\t\tfs.openSync( src, flags, mode );\n\t}\n}\n\nfunction open$1 () {\n\tvar ref = normaliseArguments$1( arguments );\n\tvar src = ref.resolvedPath;\n\tvar options = ref.options;\n\tvar flags = ref.flags;\n\n\tif ( /^.x/.test( flags ) ) {\n\t\tbailIfExists( src, flags, options.mode );\n\t}\n\n\treturn new Promise( function ( fulfil, reject ) {\n\t\tfunction open$$1 () {\n\t\t\tfs.open( src, flags, options.mode, function ( err, fd ) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\treject( err );\n\t\t\t\t} else {\n\t\t\t\t\tfulfil( fd );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// create dirs if necessary\n\t\tif ( /^[wa]/.test( flags ) ) {\n\t\t\tmkdirp( path.dirname( src ), function (err) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\treject( err );\n\t\t\t\t} else {\n\t\t\t\t\topen$$1();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\topen$$1();\n\t\t}\n\t});\n}\n\n\nfunction openSync$1 () {\n\tvar ref = normaliseArguments$1( arguments );\n\tvar src = ref.resolvedPath;\n\tvar options = ref.options;\n\tvar flags = ref.flags;\n\n\tif ( /^.x/.test( flags ) ) {\n\t\tbailIfExists( src, flags, options.mode );\n\t}\n\n\t// create dirs if necessary\n\tif ( /^[wa]/.test( flags ) ) {\n\t\tmkdirp.sync( path.dirname( src ) );\n\t}\n\n\treturn fs.openSync( src, flags, options.mode );\n}\n\nfunction symlink$1 () {\n\tvar src = resolvePath( arguments );\n\n\treturn {\n\t\tto: function to () {\n\t\t\tvar ref = resolvePathAndOptions( arguments );\n\t\t\tvar options = ref.options;\n\t\t\tvar dest = ref.resolvedPath;\n\n\t\t\treturn new Promise( function ( fulfil, reject ) {\n\t\t\t\tmkdirp( path.dirname( dest ), function (err) {\n\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\treject( err );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfs.symlink( src, dest, options.type, function (err) {\n\t\t\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\t\t\treject( err );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfulfil();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction symlinkSync$1 () {\n\tvar src = resolvePath( arguments );\n\n\treturn {\n\t\tto: function to () {\n\t\t\tvar ref = resolvePathAndOptions( arguments );\n\t\t\tvar options = ref.options;\n\t\t\tvar dest = ref.resolvedPath;\n\t\t\tmkdirp.sync( path.dirname( dest ) );\n\t\t\treturn fs.symlinkSync( src, dest, options.type );\n\t\t}\n\t};\n}\n\nvar writeFile = asyncMethod$2( 'writeFile' );\nvar appendFile = asyncMethod$2( 'appendFile' );\n\nvar writeFileSync$1 = syncMethod$2( 'writeFileSync' );\nvar appendFileSync = syncMethod$2( 'appendFileSync' );\n\nfunction normaliseArguments$2 ( args ) {\n\targs = Array.prototype.slice.call( args, 0 );\n\tvar opts = {};\n\n\tif ( typeof args[ args.length - 1 ] === 'object' && !( args[ args.length - 1 ] instanceof Buffer ) ) {\n\t\topts = args.pop();\n\t}\n\n\treturn { opts: opts, data: args.pop(), dest: resolvePath( args ) };\n}\n\nfunction asyncMethod$2 ( methodName ) {\n\treturn function () {\n\t\tvar ref = normaliseArguments$2( arguments );\n\t\tvar dest = ref.dest;\n\t\tvar data = ref.data;\n\t\tvar opts = ref.opts;\n\n\t\treturn new Promise( function ( fulfil, reject ) {\n\t\t\tmkdirp( path.dirname( dest ), function (err) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\treject( err );\n\t\t\t\t} else {\n\t\t\t\t\tfs[ methodName ]( dest, data, opts, function (err) {\n\t\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\t\treject( err );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfulfil( data );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n}\n\nfunction syncMethod$2 ( methodName ) {\n\treturn function () {\n\t\tvar ref = normaliseArguments$2( arguments );\n\t\tvar dest = ref.dest;\n\t\tvar data = ref.data;\n\n\t\tmkdirp.sync( path.dirname( dest ) );\n\t\treturn fs[ methodName ]( dest, data );\n\t};\n}\n\nfunction copydir () {\n\tvar ref = resolvePathAndOptions( arguments );\n\tvar src = ref.resolvedPath;\n\tvar readOptions = ref.options;\n\n\treturn {\n\t\tto: function to () {\n\t\t\tvar ref = resolvePathAndOptions( arguments );\n\t\t\tvar dest = ref.resolvedPath;\n\t\t\tvar writeOptions = ref.options;\n\n\t\t\tfunction copydir ( src, dest, cb ) {\n\t\t\t\tmkdirp( dest, function (err) {\n\t\t\t\t\tif ( err ) { return cb( err ); }\n\n\t\t\t\t\tfs.readdir( src, function ( err, files ) {\n\t\t\t\t\t\tif ( err ) { return cb( err ); }\n\n\t\t\t\t\t\tvar remaining = files.length;\n\n\t\t\t\t\t\tif ( !remaining ) { return cb(); }\n\n\t\t\t\t\t\tfunction check ( err ) {\n\t\t\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\t\t\treturn cb( err );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( !--remaining ) {\n\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfiles.forEach( function ( filename ) {\n\t\t\t\t\t\t\tvar srcpath = src + path.sep + filename;\n\t\t\t\t\t\t\tvar destpath = dest + path.sep + filename;\n\n\t\t\t\t\t\t\tfs.stat( srcpath, function ( err, stats ) {\n\t\t\t\t\t\t\t\tvar readStream, writeStream;\n\n\t\t\t\t\t\t\t\tif ( stats.isDirectory() ) {\n\t\t\t\t\t\t\t\t\treturn copydir( srcpath, destpath, check );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treadStream = fs.createReadStream( srcpath, readOptions );\n\t\t\t\t\t\t\t\twriteStream = fs.createWriteStream( destpath, writeOptions );\n\n\t\t\t\t\t\t\t\treadStream.on( 'error', cb );\n\t\t\t\t\t\t\t\twriteStream.on( 'error', cb );\n\n\t\t\t\t\t\t\t\twriteStream.on( 'close', check );\n\n\t\t\t\t\t\t\t\treadStream.pipe( writeStream );\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn new Promise( function ( fulfil, reject ) {\n\t\t\t\tcopydir( src, dest, function (err) {\n\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\treject( err );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfulfil();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction copydirSync () {\n\tvar ref = resolvePathAndOptions( arguments );\n\tvar src = ref.resolvedPath;\n\tvar readOptions = ref.options;\n\n\treturn {\n\t\tto: function to () {\n\t\t\tvar ref = resolvePathAndOptions( arguments );\n\t\t\tvar dest = ref.resolvedPath;\n\t\t\tvar writeOptions = ref.options;\n\n\t\t\tfunction copydir ( src, dest ) {\n\t\t\t\tmkdirp.sync( dest );\n\n\t\t\t\tfs.readdirSync( src ).forEach( function (filename) {\n\t\t\t\t\tvar srcpath = src + path.sep + filename;\n\t\t\t\t\tvar destpath = dest + path.sep + filename;\n\n\t\t\t\t\tif ( fs.statSync( srcpath ).isDirectory() ) {\n\t\t\t\t\t\treturn copydir( srcpath, destpath );\n\t\t\t\t\t}\n\n\t\t\t\t\tvar data = fs.readFileSync( srcpath, readOptions );\n\t\t\t\t\tfs.writeFileSync( destpath, data, writeOptions );\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcopydir( src, dest );\n\t\t}\n\t};\n}\n\nfunction copyFile () {\n\tvar ref = resolvePathAndOptions( arguments );\n\tvar src = ref.resolvedPath;\n\tvar readOptions = ref.options;\n\n\treturn {\n\t\tto: function to () {\n\t\t\tvar ref = resolvePathAndOptions( arguments );\n\t\t\tvar dest = ref.resolvedPath;\n\t\t\tvar writeOptions = ref.options;\n\n\t\t\treturn new Promise( function ( fulfil, reject ) {\n\t\t\t\tmkdirp( path.dirname( dest ), function (err) {\n\t\t\t\t\tif ( err ) {\n\t\t\t\t\t\treject( err );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar readStream = fs.createReadStream( src, readOptions );\n\t\t\t\t\t\tvar writeStream = fs.createWriteStream( dest, writeOptions );\n\n\t\t\t\t\t\treadStream.on( 'error', reject );\n\t\t\t\t\t\twriteStream.on( 'error', reject );\n\n\t\t\t\t\t\twriteStream.on( 'close', fulfil );\n\n\t\t\t\t\t\treadStream.pipe( writeStream );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction copyFileSync () {\n\tvar ref = resolvePathAndOptions( arguments );\n\tvar src = ref.resolvedPath;\n\tvar readOptions = ref.options;\n\n\treturn {\n\t\tto: function to () {\n\t\t\tvar ref = resolvePathAndOptions( arguments );\n\t\t\tvar dest = ref.resolvedPath;\n\t\t\tvar writeOptions = ref.options;\n\n\t\t\tvar data = fs.readFileSync( src, readOptions );\n\n\t\t\tmkdirp.sync( path.dirname( dest ) );\n\t\t\tfs.writeFileSync( dest, data, writeOptions );\n\t\t}\n\t};\n}\n\nfunction walk ( dir, callback ) {\n\tvar results = [];\n\n\tfs$1.readdir( dir, function ( err, files ) {\n\t\tif ( err ) { return callback( err ); }\n\n\t\tvar pending = files.length;\n\t\tif ( !pending ) { return callback( null, results ); }\n\n\t\tfiles.forEach( function (file) {\n\t\t\tfile = path.resolve( dir, file );\n\n\t\t\tfs$1.stat( file, function ( err, stats ) {\n\t\t\t\tif ( stats && stats.isDirectory() ) {\n\t\t\t\t\twalk( file, function ( err, res ) {\n\t\t\t\t\t\tresults = results.concat( res );\n\t\t\t\t\t\tif ( !--pending ) { callback( null, results ); }\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresults.push( file );\n\t\t\t\t\tif ( !--pending ) { callback( null, results ); }\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction lsr () {\n\tvar basedir = resolvePath( arguments );\n\n\treturn new Promise( function ( fulfil, reject ) {\n\t\twalk( basedir, function ( err, result ) {\n\t\t\tif ( err ) { return reject( err ); }\n\n\t\t\t// files should be relative to basedir\n\t\t\tvar index = basedir.length + 1;\n\t\t\tvar i = result.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tresult[i] = result[i].substring( index );\n\t\t\t}\n\n\t\t\tfulfil( result );\n\t\t});\n\t});\n}\n\nfunction lsrSync () {\n\tvar basedir = resolvePath( arguments );\n\n\tvar result = [];\n\n\tfunction processdir ( dir ) {\n\t\tfs$1.readdirSync( dir ).forEach( function (file) {\n\t\t\tvar filepath = dir + path.sep + file;\n\n\t\t\tif ( fs$1.statSync( filepath ).isDirectory() ) {\n\t\t\t\tprocessdir( filepath );\n\t\t\t} else {\n\t\t\t\tresult.push( filepath.replace( basedir + path.sep, '' ) );\n\t\t\t}\n\t\t});\n\t}\n\n\tprocessdir( basedir );\n\treturn result;\n}\n\nfunction rimraf () {\n\tvar target = resolvePath( arguments );\n\n\treturn new Promise( function ( fulfil, reject ) {\n\t\t_rimraf( target, function (err) {\n\t\t\tif ( err ) {\n\t\t\t\treject( err );\n\t\t\t} else {\n\t\t\t\tfulfil();\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction rimrafSync () {\n\t_rimraf.sync( resolvePath( arguments ) );\n}\n\nvar isWindows = process.platform === 'win32';\n\nfunction symlinkOrCopy$$1 () {\n\tvar arguments$1 = arguments;\n\n\tif ( isWindows ) {\n\t\tvar ref = resolvePathAndOptions( arguments );\n\t\tvar src = ref.resolvedPath;\n\t\tvar readOptions = ref.options;\n\n\t\tvar copyDirOrFileTo = stat$2( src )\n\t\t\t.then( function (stats) {\n\t\t\t\treturn ( stats.isDirectory() ? copydir : copyFile )\n\t\t\t\t\t.apply( null, arguments$1 )\n\t\t\t\t\t.to;\n\t\t\t});\n\n\t\treturn {\n\t\t\tto: function to () {\n\t\t\t\tvar arguments$1 = arguments;\n\n\t\t\t\treturn copyDirOrFileTo\n\t\t\t\t\t.then(function (fn) {\n\t\t\t\t\t\treturn fn.apply(null, arguments$1);\n\t\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\treturn symlink$1.apply( null, arguments );\n}\n\nfunction symlinkOrCopySync$$1 () {\n\tif ( isWindows ) {\n\t\tvar ref = resolvePathAndOptions( arguments );\n\t\tvar src = ref.resolvedPath;\n\t\tvar readOptions = ref.options;\n\t\treturn ( statSync$2( src ).isDirectory() ? copydirSync : copyFileSync ).apply( null, arguments );\n\t}\n\n\treturn symlinkSync$1.apply( null, arguments );\n}\n\n// standard async methods\nvar chmod = asyncMethod( 'chmod' );\nvar chown = asyncMethod( 'chown' );\nvar lchmod = asyncMethod( 'lchmod' );\nvar lchown = asyncMethod( 'lchown' );\nvar lstat = asyncMethod( 'lstat' );\nvar readdir$2 = asyncMethod( 'readdir' );\nvar readFile = asyncMethod( 'readFile' );\nvar readlink = asyncMethod( 'readlink' );\nvar realpath = asyncMethod( 'realpath' );\nvar rmdir = asyncMethod( 'rmdir' );\nvar stat$2 = asyncMethod( 'stat' );\nvar truncate = asyncMethod( 'truncate' );\nvar unlink = asyncMethod( 'unlink' );\nvar utimes = asyncMethod( 'utimes' );\nvar unwatchFile = asyncMethod( 'unwatchFile' );\nvar watch = asyncMethod( 'watch' );\nvar watchFile = asyncMethod( 'watchFile' );\n\n// standard sync methods\nvar chmodSync = syncMethod( 'chmodSync' );\nvar chownSync = syncMethod( 'chownSync' );\nvar lchmodSync = syncMethod( 'lchmodSync' );\nvar lchownSync = syncMethod( 'lchownSync' );\nvar lstatSync = syncMethod( 'lstatSync' );\nvar readdirSync$2 = syncMethod( 'readdirSync' );\nvar readFileSync$1 = syncMethod( 'readFileSync' );\nvar readlinkSync = syncMethod( 'readlinkSync' );\nvar realpathSync = syncMethod( 'realpathSync' );\nvar rmdirSync = syncMethod( 'rmdirSync' );\nvar statSync$2 = syncMethod( 'statSync' );\nvar truncateSync = syncMethod( 'truncateSync' );\nvar unlinkSync = syncMethod( 'unlinkSync' );\nvar utimesSync = syncMethod( 'utimesSync' );\n\n// file descriptor async methods\nvar close = asyncFileDescriptorMethod( 'close' );\nvar fchmod = asyncFileDescriptorMethod( 'fchmod' );\nvar fchown = asyncFileDescriptorMethod( 'fchown' );\nvar fstat = asyncFileDescriptorMethod( 'fstat' );\nvar fsync = asyncFileDescriptorMethod( 'fsync' );\nvar ftruncate = asyncFileDescriptorMethod( 'ftruncate' );\nvar futimes = asyncFileDescriptorMethod( 'futimes' );\nvar read = asyncFileDescriptorMethod( 'read' );\n\n// file descriptor sync methods\nvar closeSync$1 = fs.closeSync;\nvar fchmodSync$1 = fs.fchmodSync;\nvar fchownSync$1 = fs.fchownSync;\nvar fstatSync$1 = fs.fstatSync;\nvar fsyncSync$1 = fs.fsyncSync;\nvar ftruncateSync$1 = fs.ftruncateSync;\nvar futimesSync$1 = fs.futimesSync;\nvar readSync$1 = fs.readSync;\n\nexports.chmod = chmod;\nexports.chown = chown;\nexports.lchmod = lchmod;\nexports.lchown = lchown;\nexports.lstat = lstat;\nexports.readdir = readdir$2;\nexports.readFile = readFile;\nexports.readlink = readlink;\nexports.realpath = realpath;\nexports.rmdir = rmdir;\nexports.stat = stat$2;\nexports.truncate = truncate;\nexports.unlink = unlink;\nexports.utimes = utimes;\nexports.unwatchFile = unwatchFile;\nexports.watch = watch;\nexports.watchFile = watchFile;\nexports.chmodSync = chmodSync;\nexports.chownSync = chownSync;\nexports.lchmodSync = lchmodSync;\nexports.lchownSync = lchownSync;\nexports.lstatSync = lstatSync;\nexports.readdirSync = readdirSync$2;\nexports.readFileSync = readFileSync$1;\nexports.readlinkSync = readlinkSync;\nexports.realpathSync = realpathSync;\nexports.rmdirSync = rmdirSync;\nexports.statSync = statSync$2;\nexports.truncateSync = truncateSync;\nexports.unlinkSync = unlinkSync;\nexports.utimesSync = utimesSync;\nexports.close = close;\nexports.fchmod = fchmod;\nexports.fchown = fchown;\nexports.fstat = fstat;\nexports.fsync = fsync;\nexports.ftruncate = ftruncate;\nexports.futimes = futimes;\nexports.read = read;\nexports.closeSync = closeSync$1;\nexports.fchmodSync = fchmodSync$1;\nexports.fchownSync = fchownSync$1;\nexports.fstatSync = fstatSync$1;\nexports.fsyncSync = fsyncSync$1;\nexports.ftruncateSync = ftruncateSync$1;\nexports.futimesSync = futimesSync$1;\nexports.readSync = readSync$1;\nexports.createReadStream = createReadStream$1;\nexports.createWriteStream = createWriteStream$1;\nexports.exists = exists$1;\nexports.existsSync = existsSync$1;\nexports.link = link;\nexports.linkSync = linkSync;\nexports.rename = rename;\nexports.renameSync = renameSync;\nexports.mkdir = mkdir;\nexports.mkdirSync = mkdirSync;\nexports.open = open$1;\nexports.openSync = openSync$1;\nexports.symlink = symlink$1;\nexports.symlinkSync = symlinkSync$1;\nexports.writeFile = writeFile;\nexports.writeFileSync = writeFileSync$1;\nexports.appendFile = appendFile;\nexports.appendFileSync = appendFileSync;\nexports.copydir = copydir;\nexports.copydirSync = copydirSync;\nexports.copyFile = copyFile;\nexports.copyFileSync = copyFileSync;\nexports.lsr = lsr;\nexports.lsrSync = lsrSync;\nexports.rimraf = rimraf;\nexports.rimrafSync = rimrafSync;\nexports.symlinkOrCopy = symlinkOrCopy$$1;\nexports.symlinkOrCopySync = symlinkOrCopySync$$1;\n//# sourceMappingURL=sander.cjs.js.map\n"}